"use client";
import React, { useEffect, useState } from "react";
import styles from "./page.module.css";
import { getProviders, signIn, useSession } from "next-auth/react";
import { useRouter, useSearchParams } from "next/navigation";
import Link from "next/link";

const Login = ({ url }) => {
  const session = useSession();
  const router = useRouter();
  const params = useSearchParams();
  const [error, setError] = useState("");
  const [success, setSuccess] = useState("");

  useEffect(() => {
    setError(params.get("error"));
    setSuccess(params.get("success"));
  }, [params]);

  if (session.status === "loading") {
    return <p>Loading...</p>;
  }

  if (session.status === "authenticated") {
    router?.push("/dashboard");
  }

  const handleSubmit = (e) => {
    e.preventDefault();
    const email = e.target[0].value;
    const password = e.target[1].value;

    signIn("credentials", {
      email,
      password,
    });
  };

  return (
    <div className={styles.container}>
      <h1 className={styles.title}>{success ? success : "Welcome Back"}</h1>
      <h2 className={styles.subtitle}>Please sign in to see the dashboard.</h2>

      <form onSubmit={handleSubmit} className={styles.form}>
        <input
          type="text"
          placeholder="Email"
          required
          className={styles.input}
        />
        <input
          type="password"
          placeholder="Password"
          required
          className={styles.input}
        />
        <button className={styles.button}>Login</button>
        {error && error}
      </form>
      <button
        onClick={() => {
          signIn("google");
        }}
        className={styles.button + " " + styles.google}
      >
        Login with Google
      </button>
      <span className={styles.or}>- OR -</span>
      <Link className={styles.link} href="/dashboard/register">
        Create new account
      </Link>
      {/* <button
        onClick={() => {
          signIn("github");
        }}
        className={styles.button + " " + styles.github}
      >
        Login with Github
      </button> */}
    </div>
  );
};

export default Login;




// Код нь сесс объектыг үүсгэхэд хэрэглэгдэх useSession() функцийг үүсгэснээр эхэлдэг.
//  Дараа нь код нь чиглүүлэгчийг үүсгэж, түүгээрээ searchParams() функцэд дамжуулагдсан парамуудын жишээ үүсгэхэд ашигладаг.
//  Дараа нь код нь алдаа ба амжилт гэсэн хоёр төлөвийн хувьсагчийг үүсгэдэг.
//  Эдгээр жишээн дээр хараахан тохируулагдаагүй байгаа тул хоёуланг нь тэг утгаараа эхлүүлсэн.
//  Дараа нь, params дээрх get("error")-аас буцаасан ямар ч утгад алдааны утгыг тохируулах useEffect() дуудлага байдаг (хэрэв алдаа олдоогүй бол энэ нь тодорхойгүй байх болно).
//  Дараа нь хэрэглэгч "Хайлт" дээр дарахад setSuccess нь get("амжилт")-аас буцаасан утгаар дуудагдах болно.
//  Эцэст нь ачаалж дууссаны дараа Chrome-н хөгжүүлэгчийн хэрэгсэл эсвэл консолын бүртгэл дэх таслах цэгүүдийг ашиглан дараа нь юу болохыг шинжилнэ үү.
//  Хэрэглэгч програм руу шилжих үед кодыг гүйцэтгэх болно.
//  Аппликешн дээр хайлт хийх үед кодыг гүйцэтгэх болно.
//  Ресторан хайх явцад алдаа гарсан тохиолдолд кодыг гүйцэтгэх болно.
//  Код нь session гэж нэрлэгддэг хувьсагчийг зарласнаар эхэлдэг.
//  Энэ нь хэрэглэгчийн нэвтрэх төлөв болон түүний бүртгэлтэй холбоотой бусад өгөгдлийн талаарх мэдээллийг хадгалахад ашиглагдах объект юм.
//  Дараа нь код нь if мэдэгдлийг зарладаг бөгөөд энэ нь хэрэглэгч өөрийн итгэмжлэлээр баталгаажуулсан эсэхийг шалгадаг (өөрөөр хэлбэл тэд имэйл хаяг болон нууц үгээ оруулсан).
//  Хэрэв тийм бол энэ нь handleSubmit() нэртэй функцийг дуудна.
//  handleSubmit() функц нь нэг аргументыг авдаг: e , энэ нь хэрэглэгч манай маягт дээр submit дээр дарах үед үүссэн үйл явдлын объект юм.
//  Энэ тохиолдолд бид маягтыг илгээх явцад юу болсон тухай мэдээллийг хадгалах арга болгон e-г ашиглаж байна.
//  Бид e-г ашиглан маягтыг илгээхдээ өгөгдмөл үйлдлээс урьдчилан сэргийлэхийн тулд ашигладаг, учир нь бид юу ч болсон хамаагүй, манай апп-д ямар нэгэн зүйл хийхээс өмнө серверээсээ ямар нэг зүйлийг буцааж авахыг хүсч байна.
//  Маягтыг хэн илгээсэн болохыг мэдэхийн тулд бид үүнийг илгээсний дараа тэднийг тодорхойлох ямар нэгэн арга хэрэгтэй - иймээс бид юу болсон талаарх мэдээллийг e-д хадгалж байгаа юм.
//  Үүнийг хийхийн тулд handleSubmit() хэрхэн ажилладагийг харцгаая: Энэ нь эхлээд имэйлийн талбарт бичсэн утгыг сесс['email'] дотор хадгалдаг.
//  Код нь нэвтрэх функцийн нэг хэсэг юм.
//  Таны анзаарах хамгийн эхний зүйл бол бид хувьсагчийг зарлахдаа const түлхүүр үгийг ашиглаж байгаа явдал юм.
//  Учир нь бид энэ тодорхой кодын тогтмолыг бий болгохыг хүсч байна.
//  Дараа нь бид сессийн статусыг баталгаажуулсан эсэхийг шалгадаг if хэллэгтэй бөгөөд хэрэв байгаа бол энэ нь манай чиглүүлэгчийн объектыг /хяналтын самбарын маршрутаар DOM руу түлхэх болно.
//  Хэрэв тийм биш бол e.preventDefault() руу залгаснаар энэ нь хуудсан дээр ямар нэгэн анхдагч үйлдэл гарахаас сэргийлнэ.
//  Дараа нь энэ функц дотроос манай имэйл болон нууц үгийн хувьсагчид хандахын тулд const email = e.target[0].value; ба const нууц үг = e.
//  Код нь гарчиг, хоёр догол мөрөөс эхэлдэг.
//  Эхний догол мөр нь "Эргээд тавтай морил" гэсэн хуудасны гарчиг юм.
//  Хоёрдахь догол мөрөнд "Хяналтын самбарыг харахын тулд нэвтэрнэ үү" гэсэн хадмал гарчигтай.
//  Энэ маягт дээр гурван оруулах талбар байдаг: имэйл, нууц үг, нэвтрэх товчлуур.
//  Код нь хуудасны гарчигт h1 className үүсгэснээр эхэлнэ.
//  Дараа нь энэ хуудасны хадмал гарчигт h2 className үүсгэнэ.
//  Дараа нь энэ нь имэйл, нууц үг, нэвтрэх товчлуурын оролт бүхий маягт үүсгэдэг.
//  Эцэст нь энэ нь handleSubmit()-д илгээх зохицуулагчийг нэмдэг.
//  Код нь нэвтрэх маягтын HTML код юм.
//  Эхний хоёр оролт нь имэйл болон нууц үгэнд зориулагдсан бөгөөд эдгээр нь хоёулаа шаардлагатай талбар юм.
//  Сүүлийн оролт нь нэвтрэх эсвэл бүртгүүлэхэд ашиглагдах товчлуур юм.
//  Дараах CSS загваруудыг маягтанд хэрэглэнэ: form { margin-top: 10px; } оролт[төрөл = "текст"] { өргөн: 100%; } оролт[төрөл = "нууц үг"] {өргөн: 200px; дэвсгэр-зүүн: 20px; } товчлуур {арын өнгө: #000; хилийн радиус: 4px; өнгө: #fff; үсгийн хэмжээ: 16px; текстийг зэрэгцүүлэх: төв; өндөр: 30px; шугамын өндөр: 30px;